@page "/chess/{gameType?}/{gameId?}"

@using BoardWatcherClient
@inject ChessGameStateService GameStateService
@inject IJSRuntime JSRuntime
@using System.Text
@using System.Threading
@using System.Net.WebSockets
@implements IDisposable
@using Newtonsoft.Json

@if (connected == 2)
{
    <div class="center">
        <h1>Connecting to the game: @gameId</h1>
    </div>
}
@if (connected == 0)
{
    <div class="center">
        <h1>Couldn't find game with game ID: @gameId</h1>
    </div>
}
@if (connected == 1)
{
    @if (gameId != null)
    {
        <div class="center">
            <h1>Running in OpenCV Mode, Game ID: @gameId</h1>
        </div>
    }
    {
        <div class="flex-container">
            <div class="flex-child">
                <table class="chess-board">
                    <tbody>
                        <tr>
                            <th></th>
                            <th>a</th>
                            <th>b</th>
                            <th>c</th>
                            <th>d</th>
                            <th>e</th>
                            <th>f</th>
                            <th>g</th>
                            <th>h</th>
                        </tr>

                        <tr>
                            <th>8</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="light">@GetPiece(gameBoard[0 + i])</td } else { <td class="dark">@GetPiece(gameBoard[1 +
                    i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>7</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="dark">@GetPiece(gameBoard[8 + i])</td } else { <td class="light">@GetPiece(gameBoard[9 +
                    i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>6</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="light">@GetPiece(gameBoard[16 + i])</td } else { <td class="dark">@GetPiece(gameBoard[17
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>5</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="dark">@GetPiece(gameBoard[24 + i])</td } else { <td class="light">@GetPiece(gameBoard[25
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>4</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="light">@GetPiece(gameBoard[32 + i])</td } else { <td class="dark">@GetPiece(gameBoard[33
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>3</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="dark">@GetPiece(gameBoard[40 + i])</td } else { <td class="light">@GetPiece(gameBoard[41
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>2</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="light">@GetPiece(gameBoard[48 + i])</td } else { <td class="dark">@GetPiece(gameBoard[49
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>1</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="dark">@GetPiece(gameBoard[56 + i])</td } else { <td class="light">@GetPiece(gameBoard[57
                    + i])</td>
                                }
                            }
                        </tr>
                    </tbody>
                </table>
                @if (gameType == "CV")
                {
                    <div class="stateMenu">
                        @* <button class="btn btn-primary"> <span class="oi oi-media-skip-backward"
                            aria-hidden="true"></span></button>
                            <button class="btn btn-primary" @onclick="moveBackwards"> <span class="oi oi-media-step-backward"
                            aria-hidden="true"></span></button> *@
                        <button class="btn btn-primary" @onclick="moveForward"> <span class="oi oi-media-step-forward"
                    aria-hidden="true"></span></button>
                        @* <button class="btn btn-primary"> <span class="oi oi-media-skip-forward"
                            aria-hidden="true"></span></button> *@
                    </div>
                }
            </div>
            <div class="flex-child">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Move</th>
                            <th>Whites</th>
                            <th>Blacks</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int index = 0; index < MovesInNotation.Count - 1; index += 2)
                        {
                            <tr>
                                <td>@(index / 2).</td>
                                <td>@MovesInNotation[index]</td>
                                <td>@MovesInNotation[index + 1]</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="center">
                    <button class="btn btn-primary" @onclick="DownloadFile">Download PGN File</button>
                </div>
            </div>
        </div>
    }
}


@code {
    private PieceCV[] gameBoard;
    private List<Move> MovesHistory = new List<Move>();
    private List<string> MovesInNotation = new List<string>();
    private int moveCounter;
    private int connected = 2;
    private CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    private ClientWebSocket webSocket = new ClientWebSocket();
    private string message = "Hello, websocket!";

    [Parameter]
    public string gameId { get; set; }
    [Parameter]
    public string gameType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        gameId = gameId ?? "Not provided";
        gameBoard = await GameStateService.GetPieceData();
        moveCounter = 0;
        try
        {
            string watchUrl = "wss://sleepy-falls-41701.herokuapp.com/watch?id=" + gameId;
            await webSocket.ConnectAsync(new Uri(watchUrl), disposalTokenSource.Token);
            connected = 1;
            _ = ReceiveLoop();
            _ = sendLoop();
        }
        catch (Exception ex)
        {
            connected = 0;
        }
        updateMovesInNotatioin();
    }

    public void updateMovesInNotatioin()
    {
        List<string> movesInNotation = new List<string>();
        foreach (Move move in MovesHistory)
        {
            movesInNotation.Add(getMoveInNotation(move));
        }
        MovesInNotation = movesInNotation;
    }

    public void moveForward()
    {
        if (moveCounter < MovesHistory.Count)
        {
            Move currentMove = MovesHistory[moveCounter];
            this.gameBoard[currentMove.to] = this.gameBoard[currentMove.from];
            this.gameBoard[currentMove.from] = getClearField();
            if (moveCounter < MovesHistory.Count) moveCounter++;
        }
    }
    public PieceCV getClearField()
    {
        return new PieceCV(0, false);
    }

    async Task sendLoop()
    {
        var dataToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(message));
        while (!disposalTokenSource.IsCancellationRequested)
        {
            await Task.Delay(59000);
            await webSocket.SendAsync(dataToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
        }
    }

    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        Move serverResponse;
        while (!disposalTokenSource.IsCancellationRequested)
        {
            var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);
            serverResponse = JsonConvert.DeserializeObject<Move>(receivedAsText);
            Console.WriteLine(receivedAsText);
            AddMove(serverResponse);
            StateHasChanged();
        }
    }

    public void AddMove(Move move)
    {
        MovesHistory.Add(move);
        updateMovesInNotatioin();
        if (moveCounter == MovesHistory.Count - 1)
        {
            moveForward();
        }
    }

    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }

    public string getMoveInNotation(Move move)
    {
        string fieldName = "";
        fieldName += getPieceName(move.piece);
        if (gameBoard[move.to].Id != 0) // check if capture
        {
            fieldName += "x";
        }
        fieldName += ((char)(move.to % 8 + 97));
        fieldName += (8 - move.to / 8).ToString();
        return fieldName;
    }

    public async void DownloadFile()
    {
        string fileContent = "";
        foreach (string move in MovesInNotation)
        {
            fileContent += move;
            fileContent += " ";
        }
        await JSRuntime.InvokeAsync<object>("FileSave", "PGN", fileContent);
    }

    public string getPieceName(int pieceId)
    {
        switch (pieceId)
        {
            case 0:
                return "";
            case 1:
                return ""; // pawn
            case 2:
                return "R"; // rook
            case 3:
                return "N"; // knight
            case 4:
                return "B"; // bishop
            case 5:
                return "Q"; // queen
            case 6:
                return "K"; // king
        }
        return "";
    }

    public string GetPiece(PieceCV piece)
    {
        if (piece.Color)
        {
            switch (piece.Id)
            {
                case 1:
                    return "♙";
                case 2:
                    return "♖";
                case 3:
                    return "♘";
                case 4:
                    return "♗";
                case 5:
                    return "♕";
                case 6:
                    return "♔";
                default:
                    return "";
            }
        }
        else
        {
            switch (piece.Id)
            {
                case 1:
                    return "♟";
                case 2:
                    return "♜";
                case 3:
                    return "♞";
                case 4:
                    return "♝";
                case 5:
                    return "♛";
                case 6:
                    return "♚";
                default:
                    return "";
            }
        }
    }
}

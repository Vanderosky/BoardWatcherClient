@page "/chess/{gameType?}/{gameId?}"

@using BoardWatcherClient
@inject ChessGameStateService GameStateService
@inject IJSRuntime JSRuntime
@using System.Text
@using System.Threading
@using System.Net.WebSockets
@implements IDisposable
@using Newtonsoft.Json
@using BlazorPro.BlazorSize


<MediaQuery Media="@Breakpoints.OnlyMedium" @bind-Matches="IsMedium" />
<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="IsSmall" />

@if (webSocket.State == WebSocketState.Connecting || webSocket.State == WebSocketState.None)
{
    <div class="center">
        <h1>Connecting to the game: @gameId</h1>
    </div>
}
@if (webSocket.State == WebSocketState.Closed)
{
    <div class="center">
        <h1>Couldn't find game with game ID: @gameId</h1>
    </div>
}
@if (webSocket.State == WebSocketState.CloseReceived || webSocket.State == WebSocketState.CloseSent)
{
    <div class="center">
        <h1>Lost connection with game: @gameId, try to reconnect again</h1>
    </div>
}

<div>
    <h5>Connection @webSocket.State</h5>
</div>
@if (webSocket.State == WebSocketState.Open)
{
    @if (IsSmall)
    {
        @if (gameId != null)
        {
            <div class="center">
                <h6>Running in OpenCV Mode, Game ID: @gameId</h6>
            </div>
            <div class="center">
            <table class="chess-board">
                <tbody>
                    <tr>
                        <th></th>
                        <th>a</th>
                        <th>b</th>
                        <th>c</th>
                        <th>d</th>
                        <th>e</th>
                        <th>f</th>
                        <th>g</th>
                        <th>h</th>
                    </tr>

                    <tr>
                        <th>8</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoards[moveCounter][0 + i])</td } else { <td class="dark">
                                    @GetPiece(gameBoards[moveCounter][1 +
            i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>7</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoards[moveCounter][8 + i])</td } else { <td class="light">
                                    @GetPiece(gameBoards[moveCounter][9 +
            i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>6</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoards[moveCounter][16 + i])</td } else { <td class="dark">
                                    @GetPiece(gameBoards[moveCounter][17
            + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>5</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoards[moveCounter][24 + i])</td } else { <td class="light">
                                    @GetPiece(gameBoards[moveCounter][25
            + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>4</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoards[moveCounter][32 + i])</td } else { <td class="dark">
                                    @GetPiece(gameBoards[moveCounter][33
            + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>3</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoards[moveCounter][40 + i])</td } else { <td class="light">
                                    @GetPiece(gameBoards[moveCounter][41
            + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>2</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoards[moveCounter][48 + i])</td } else { <td class="dark">
                                    @GetPiece(gameBoards[moveCounter][49
            + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>1</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoards[moveCounter][56 + i])</td } else { <td class="light">
                                    @GetPiece(gameBoards[moveCounter][57
            + i])</td>
                            }
                        }
                    </tr>
                </tbody>
            </table>
            </div>
            <div class="pgn-mobile">
                <p>
                @for (int index = 0; index < MovesInNotation.Count; index += 2)
                {
                        @MovesInNotation[index];
                        @if (index < MovesInNotation.Count - 1)
                        {
                            @MovesInNotation[index + 1]
                        }
                }
                </p>
            </div>
            <div class="center">
                <button class="btn btn-primary" @onclick="skipBackwards"> <span class="oi oi-media-skip-backward"
            aria-hidden="true"></span></button>
                <button class="btn btn-primary" @onclick="moveBackwards"> <span class="oi oi-media-step-backward"
            aria-hidden="true"></span></button>
                <button class="btn btn-primary" @onclick="moveForward"> <span class="oi oi-media-step-forward"
            aria-hidden="true"></span></button>
                <button class="btn btn-primary" @onclick="skipForward"> <span class="oi oi-media-skip-forward"
            aria-hidden="true"></span></button>
            </div>
            <div class="center updated-mobile">
                <p>Last updated at @updateDate.Hour:@updateDate.Minute:@updateDate.Second</p>
            </div>
        }
    }
    else
    {
        @if (gameId != null)
        {
            <div class="center">
                <h1>Running in OpenCV Mode, Game ID: @gameId</h1>
            </div>
        }
        <div class="flex-container">
            <div class="flex-child">
                <table class="chess-board">
                    <tbody>
                        <tr>
                            <th></th>
                            <th>a</th>
                            <th>b</th>
                            <th>c</th>
                            <th>d</th>
                            <th>e</th>
                            <th>f</th>
                            <th>g</th>
                            <th>h</th>
                        </tr>

                        <tr>
                            <th>8</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="light">@GetPiece(gameBoards[moveCounter][0 + i])</td } else { <td class="dark">
                                        @GetPiece(gameBoards[moveCounter][1 +
                    i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>7</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="dark">@GetPiece(gameBoards[moveCounter][8 + i])</td } else { <td class="light">
                                        @GetPiece(gameBoards[moveCounter][9 +
                    i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>6</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="light">@GetPiece(gameBoards[moveCounter][16 + i])</td } else { <td class="dark">
                                        @GetPiece(gameBoards[moveCounter][17
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>5</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="dark">@GetPiece(gameBoards[moveCounter][24 + i])</td } else { <td class="light">
                                        @GetPiece(gameBoards[moveCounter][25
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>4</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="light">@GetPiece(gameBoards[moveCounter][32 + i])</td } else { <td class="dark">
                                        @GetPiece(gameBoards[moveCounter][33
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>3</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="dark">@GetPiece(gameBoards[moveCounter][40 + i])</td } else { <td class="light">
                                        @GetPiece(gameBoards[moveCounter][41
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>2</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="light">@GetPiece(gameBoards[moveCounter][48 + i])</td } else { <td class="dark">
                                        @GetPiece(gameBoards[moveCounter][49
                    + i])</td>
                                }
                            }
                        </tr>
                        <tr>
                            <th>1</th>
                            @for (var i = 0; i < 8; i++)
                            {
                                if (i % 2 == 0)
                                {
                                    <td class="dark">@GetPiece(gameBoards[moveCounter][56 + i])</td } else { <td class="light">
                                        @GetPiece(gameBoards[moveCounter][57
                    + i])</td>
                                }
                            }
                        </tr>
                    </tbody>
                </table>
                @if (gameType == "CV")
                {
                    <div class="stateMenu">
                        <button class="btn btn-primary" @onclick="skipBackwards"> <span class="oi oi-media-skip-backward"
                    aria-hidden="true"></span></button>
                        <button class="btn btn-primary" @onclick="moveBackwards"> <span class="oi oi-media-step-backward"
                    aria-hidden="true"></span></button>
                        <button class="btn btn-primary" @onclick="moveForward"> <span class="oi oi-media-step-forward"
                    aria-hidden="true"></span></button>
                        <button class="btn btn-primary" @onclick="skipForward"> <span class="oi oi-media-skip-forward"
                    aria-hidden="true"></span></button>
                        <h8>Last updated at @updateDate.Hour:@updateDate.Minute:@updateDate.Second</h8>
                    </div>
                }
            </div>
            <div class="flex-child">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Move</th>
                            <th>White</th>
                            <th>Black</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int index = 0; index < MovesInNotation.Count; index += 2)
                        {
                            <tr>
                                <td>@((index / 2) + 1).</td>
                                <td>@MovesInNotation[index]</td>
                                @if (index < MovesInNotation.Count - 1)
                                {
                                    <td>@MovesInNotation[index + 1]</td>
                                }
                                else
                                {
                                    <td></td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="center">
                    <button class="btn btn-primary" @onclick="DownloadFile">Download PGN File</button>
                </div>
            </div>
        </div>
    }
}


@code {
    private List<List<PieceCV>> gameBoards = new List<List<PieceCV>>();
    private List<Move> MovesHistory = new List<Move>();
    private List<string> MovesInNotation = new List<string>();
    private int moveCounter;
    private int moveInNotationCount;
    private CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    private ClientWebSocket webSocket = new ClientWebSocket();
    private string message = "Hello, websocket!";
    private DateTime updateDate = DateTime.Now;

    bool IsMedium = false;
    bool IsSmall = false;

    [Parameter]
    public string gameId { get; set; }
    [Parameter]
    public string gameType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        gameId = gameId ?? "Not provided";
        gameBoards.Add(await GameStateService.GetPieceData());
        moveCounter = 0;
        moveInNotationCount = 0;
        try
        {
            string watchUrl = "wss://sleepy-falls-41701.herokuapp.com/watch?id=" + gameId;
            await webSocket.ConnectAsync(new Uri(watchUrl), disposalTokenSource.Token);
            _ = ReceiveLoop();
            _ = sendLoop();
        }
        catch (Exception) { }
    }

    public void moveBackwards()
    {
        if (moveCounter > 0) moveCounter--;
    }
    public void moveForward()
    {
        if (moveCounter < MovesHistory.Count) moveCounter++;
    }

    public void skipBackwards()
    {
        moveCounter = 0;
    }

    public void skipForward()
    {
        moveCounter = gameBoards.Count - 1;
    }
    public PieceCV getClearField()
    {
        return new PieceCV(0, false);
    }

    async Task sendLoop()
    {
        var dataToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(message));
        while (webSocket.State == WebSocketState.Open)
        {
            await webSocket.SendAsync(dataToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
            Console.WriteLine("sent to server to keep connection open");
            await Task.Delay(30000);
        }
    }

    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        Move serverResponse;
        while (webSocket.State == WebSocketState.Open)
        {
            var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);
            Console.WriteLine(receivedAsText);
            if (receivedAsText == "REVERT")
            {
                RevertLastMove();
            }
            else
            {
                serverResponse = JsonConvert.DeserializeObject<Move>(receivedAsText);
                AddMove(serverResponse);
            }
            updateDate = DateTime.Now;
            StateHasChanged();
        }
    }

    public void RevertLastMove()
    {
        if (moveCounter > 0) moveCounter--;
        if (gameBoards.Any())
        {
            gameBoards.RemoveAt(gameBoards.Count - 1);
        }
        if (moveInNotationCount > 0) moveInNotationCount--;
        if (MovesInNotation.Any())
        {
            MovesInNotation.RemoveAt(MovesInNotation.Count - 1);
        }
    }

    public void AddMove(Move move)
    {
        MovesHistory.Add(move);
        updateMovesInNotatioin();
        List<PieceCV> tmpGameBoard = new List<PieceCV>(this.gameBoards[moveCounter]);
        tmpGameBoard[move.to] = tmpGameBoard[move.from];
        tmpGameBoard[move.from] = getClearField();
        this.gameBoards.Add(tmpGameBoard);
        if (moveCounter == MovesHistory.Count - 1)
        {
            moveForward();
        }
    }

    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }

    public void updateMovesInNotatioin()
    {
        if (moveInNotationCount > 0)
        {
            if (MovesHistory[moveInNotationCount - 1].color == MovesHistory[moveInNotationCount].color)
            {
                MovesInNotation.RemoveAt(MovesInNotation.Count - 1);
                MovesInNotation.Add(getMoveInNotation(MovesHistory[moveInNotationCount], true));
            }
            else
            {
                MovesInNotation.Add(getMoveInNotation(MovesHistory[moveInNotationCount]));
            }
        }
        else
        {
            MovesInNotation.Add(getMoveInNotation(MovesHistory[moveInNotationCount]));
        }
        moveInNotationCount++;
    }

    public string getMoveInNotation(Move move, Boolean castle = false)
    {
        string fieldName = "";
        if (castle)
        {
            fieldName += ((char)(move.to % 8 + 97));
            fieldName += (8 - move.to / 8).ToString();
            if (move.piece == 6)
            {
                fieldName += " O-O"; //kingside castle
                return fieldName;
            }
            if (move.piece == 5)
            {
                fieldName += " O-O-O"; //quenside castle
                return fieldName;
            }
        }
        fieldName += getPieceName(move.piece);
        if (gameBoards[moveCounter][move.to].Id != 0) // check if capture
        {
            fieldName += "x";
        }
        fieldName += ((char)(move.to % 8 + 97));
        fieldName += (8 - move.to / 8).ToString();
        fieldName += " ";
        return fieldName;
    }

    public async void DownloadFile()
    {
        string fileContent = "";
        foreach (string move in MovesInNotation)
        {
            fileContent += move;
            fileContent += " ";
        }
        await JSRuntime.InvokeAsync<object>("FileSave", "PGN", fileContent);
    }

    public string getPieceName(int pieceId)
    {
        switch (pieceId)
        {
            case 0:
                return "";
            case 1:
                return ""; // pawn
            case 2:
                return "R"; // rook
            case 3:
                return "N"; // knight
            case 4:
                return "B"; // bishop
            case 5:
                return "Q"; // queen
            case 6:
                return "K"; // king
        }
        return "";
    }

    public string GetPiece(PieceCV piece)
    {
        if (piece.Color)
        {
            switch (piece.Id)
            {
                case 1:
                    return "♙";
                case 2:
                    return "♖";
                case 3:
                    return "♘";
                case 4:
                    return "♗";
                case 5:
                    return "♕";
                case 6:
                    return "♔";
                default:
                    return "";
            }
        }
        else
        {
            switch (piece.Id)
            {
                case 1:
                    return "♟";
                case 2:
                    return "♜";
                case 3:
                    return "♞";
                case 4:
                    return "♝";
                case 5:
                    return "♛";
                case 6:
                    return "♚";
                default:
                    return "";
            }
        }
    }
}

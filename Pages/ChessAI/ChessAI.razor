@page "/chess/AI/{gameId?}"

@using BoardWatcherClient
@using Newtonsoft.Json
@using System.Net.Http
@inject HttpClient HttpClient
@inject ChessGameStateService GameStateService
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject RoutingService routingService

@if (gameId != null)
{
    <div class="center">
        <h1>Running in AI Mode, Game ID: @gameId</h1>
    </div>
}

@if (gameBoard == null && !failedFetch)
{
    <p><em>Loading...</em></p>
}
else if (failedFetch)
{
    <div class="center">
        <h4>Failed loadiing Game, are you sure you entered correct Game ID?</h4>
    </div>
}
else
{
    <div class="flex-container">
        <div class="flex-child center">
            <table class="chess-board">
                <tbody>
                    <tr>
                        <th></th>
                        <th>a</th>
                        <th>b</th>
                        <th>c</th>
                        <th>d</th>
                        <th>e</th>
                        <th>f</th>
                        <th>g</th>
                        <th>h</th>
                    </tr>

                    <tr>
                        <th>8</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[0 + i])</td } else { <td class="dark">@GetPiece(gameBoard[1 +
                    i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>7</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[8 + i])</td } else { <td class="light">@GetPiece(gameBoard[9 +
                    i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>6</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[16 + i])</td } else { <td class="dark">@GetPiece(gameBoard[17
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>5</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[24 + i])</td } else { <td class="light">@GetPiece(gameBoard[25
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>4</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[32 + i])</td } else { <td class="dark">@GetPiece(gameBoard[33
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>3</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[40 + i])</td } else { <td class="light">@GetPiece(gameBoard[41
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>2</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[48 + i])</td } else { <td class="dark">@GetPiece(gameBoard[49
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>1</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[56 + i])</td } else { <td class="light">@GetPiece(gameBoard[57
                    + i])</td>
                            }
                        }
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="center pgn-mobile">
        <button class="btn btn-primary" @onclick="fetchBoard"> <span aria-hidden="true">Refresh</span></button>
    </div>
}

@code {
    private List<PieceAI> gameBoard;
    private readonly HttpClient httpClient;
    private Boolean failedFetch = false;
    [Parameter]
    public string gameId { get; set; }
    [Parameter]
    public string gameType { get; set; }
    protected override async Task OnInitializedAsync()
    {
        gameId = gameId ?? "Not provided";
        routingService.setGameId(gameId);
        try
        {
            string response = await HttpClient.GetStringAsync("https://sleepy-falls-41701.herokuapp.com/AI/get?id=" + gameId);
            gameBoard = JsonConvert.DeserializeObject<List<PieceAI>>(response);
        }
        catch (Exception)
        {
            failedFetch = true;
        }
    }

    async public Task fetchBoard()
    {
        try
        {
            string response = await HttpClient.GetStringAsync("https://sleepy-falls-41701.herokuapp.com/AI/get?id="  + gameId);
            gameBoard = JsonConvert.DeserializeObject<List<PieceAI>>(response);
        }
        catch (Exception)
        {
            failedFetch = true;
        }
    }

    public string buildFEN(int l, int licz)
    {
        var FEN = "";
        if (gameBoard[l].Piece == "White-King")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "K";
                licz = 0;
            }
            else
            {
                FEN += "K";
            }
        }
        if (gameBoard[l].Piece == "Black-King")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "k";
                licz = 0;
            }
            else
            {
                FEN += "k";
            }
        }
        if (gameBoard[l].Piece == "White-Queen")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "Q";
                licz = 0;
            }
            else
            {
                FEN += "Q";
            }
        }
        if (gameBoard[l].Piece == "Black-Queen")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "q";
                licz = 0;
            }
            else
            {
                FEN += "q";
            }
        }
        if (gameBoard[l].Piece == "White-Pawn")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "P";
                licz = 0;
            }
            else
            {
                FEN += "P";
            }
        }
        if (gameBoard[l].Piece == "Black-Pawn")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "p";
                licz = 0;
            }
            else
            {
                FEN += "p";
            }
        }
        if (gameBoard[l].Piece == "White-Bishop")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "B";
                licz = 0;
            }
            else
            {
                FEN += "B";
            }
        }
        if (gameBoard[l].Piece == "Black-Bishop")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "b";
                licz = 0;
            }
            else
            {
                FEN += "b";
            }
        }
        if (gameBoard[l].Piece == "White-Rook")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "R";
                licz = 0;
            }
            else
            {
                FEN += "R";
            }
        }
        if (gameBoard[l].Piece == "Black-Rook")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "r";
                licz = 0;
            }
            else
            {
                FEN += "r";
            }
        }
        if (gameBoard[l].Piece == "White-Knight")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "N";
                licz = 0;
            }
            else
            {
                FEN += "N";
            }
        }
        if (gameBoard[l].Piece == "Black-Knight")
        {
            if (licz > 0)
            {
                FEN += licz.ToString() + "n";
                licz = 0;
            }
            else
            {
                FEN += "n";
            }
        }
        return FEN;
    }

    public string generateFEN()
    {
        var l = 0;
        var licz = 0;
        var FEN = "";
        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                FEN += buildFEN(l, licz);
                if (gameBoard[l].Piece == "Empty")
                {
                    licz++;
                }
                if ((j + 1) % 8 == 0)
                {
                    if (licz > 0)
                    {
                        FEN += licz.ToString() + "/";
                        licz = 0;
                    }
                    else
                    {
                        FEN += "/";
                    }
                }
                l += 1;
            }
        }
        return FEN;
    }
    public string GetPiece(PieceAI piece)
    {
        switch (piece.Piece)
        {
            case "Black-Pawn":
                return "♟";
            case "Black-Rook":
                return "♜";
            case "Black-Knight":
                return "♞";
            case "Black-Bishop":
                return "♝";
            case "Black-Queen":
                return "♛";
            case "Black-King":
                return "♚";

            case "White-Pawn":
                return "♙";
            case "White-Rook":
                return "♖";
            case "White-Knight":
                return "♘";
            case "White-Bishop":
                return "♗";
            case "White-Queen":
                return "♕";
            case "White-King":
                return "♔";
            default:
                return "";
        }
    }
}
